# **********************************************************************
#
# Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.1
#
# <auto-generated>
#
# Generated from file `app.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module appli
_M_appli = Ice.openModule('appli')
__name__ = 'appli'

if '_t_song' not in _M_appli.__dict__:
    _M_appli._t_song = IcePy.defineSequence('::appli::song', (), IcePy._t_byte)

if 'music' not in _M_appli.__dict__:
    _M_appli.music = Ice.createTempClass()
    class music(object):
        def __init__(self, name='', url=''):
            self.name = name
            self.url = url

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.url)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_appli.music):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.url is None or other.url is None:
                    if self.url != other.url:
                        return (-1 if self.url is None else 1)
                else:
                    if self.url < other.url:
                        return -1
                    elif self.url > other.url:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_appli._t_music)

        __repr__ = __str__

    _M_appli._t_music = IcePy.defineStruct('::appli::music', music, (), (
        ('name', (), IcePy._t_string),
        ('url', (), IcePy._t_string)
    ))

    _M_appli.music = music
    del music

if '_t_repository' not in _M_appli.__dict__:
    _M_appli._t_repository = IcePy.defineSequence('::appli::repository', (), _M_appli._t_music)

if '_t_liste' not in _M_appli.__dict__:
    _M_appli._t_liste = IcePy.defineSequence('::appli::liste', (), IcePy._t_string)

if 'Streamer' not in _M_appli.__dict__:
    _M_appli.Streamer = Ice.createTempClass()
    class Streamer(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_appli.Streamer:
                raise RuntimeError('appli.Streamer is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::appli::Streamer')

        def ice_id(self, current=None):
            return '::appli::Streamer'

        def ice_staticId():
            return '::appli::Streamer'
        ice_staticId = staticmethod(ice_staticId)

        def getRepertoire(self, current=None):
            pass

        def addSong(self, theSong, nameSong, current=None):
            pass

        def checkStream(self, nameSong, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_appli._t_Streamer)

        __repr__ = __str__

    _M_appli.StreamerPrx = Ice.createTempClass()
    class StreamerPrx(Ice.ObjectPrx):

        def getRepertoire(self, _ctx=None):
            return _M_appli.Streamer._op_getRepertoire.invoke(self, ((), _ctx))

        def begin_getRepertoire(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.Streamer._op_getRepertoire.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getRepertoire(self, _r):
            return _M_appli.Streamer._op_getRepertoire.end(self, _r)

        def addSong(self, theSong, nameSong, _ctx=None):
            return _M_appli.Streamer._op_addSong.invoke(self, ((theSong, nameSong), _ctx))

        def begin_addSong(self, theSong, nameSong, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.Streamer._op_addSong.begin(self, ((theSong, nameSong), _response, _ex, _sent, _ctx))

        def end_addSong(self, _r):
            return _M_appli.Streamer._op_addSong.end(self, _r)

        def checkStream(self, nameSong, _ctx=None):
            return _M_appli.Streamer._op_checkStream.invoke(self, ((nameSong, ), _ctx))

        def begin_checkStream(self, nameSong, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.Streamer._op_checkStream.begin(self, ((nameSong, ), _response, _ex, _sent, _ctx))

        def end_checkStream(self, _r):
            return _M_appli.Streamer._op_checkStream.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_appli.StreamerPrx.ice_checkedCast(proxy, '::appli::Streamer', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_appli.StreamerPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::appli::Streamer'
        ice_staticId = staticmethod(ice_staticId)

    _M_appli._t_StreamerPrx = IcePy.defineProxy('::appli::Streamer', StreamerPrx)

    _M_appli._t_Streamer = IcePy.defineClass('::appli::Streamer', Streamer, -1, (), True, False, None, (), ())
    Streamer._ice_type = _M_appli._t_Streamer

    Streamer._op_getRepertoire = IcePy.Operation('getRepertoire', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_appli._t_repository, False, 0), ())
    Streamer._op_addSong = IcePy.Operation('addSong', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_appli._t_song, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    Streamer._op_checkStream = IcePy.Operation('checkStream', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())

    _M_appli.Streamer = Streamer
    del Streamer

    _M_appli.StreamerPrx = StreamerPrx
    del StreamerPrx

if 'Central' not in _M_appli.__dict__:
    _M_appli.Central = Ice.createTempClass()
    class Central(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_appli.Central:
                raise RuntimeError('appli.Central is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::appli::Central')

        def ice_id(self, current=None):
            return '::appli::Central'

        def ice_staticId():
            return '::appli::Central'
        ice_staticId = staticmethod(ice_staticId)

        def inscriptionClient(self, login, passWord, current=None):
            pass

        def connectionClient(self, login, passWord, current=None):
            pass

        def findByName(self, nameSong, current=None):
            pass

        def streamByName(self, nameSong, current=None):
            pass

        def add(self, theSong, nameSong, current=None):
            pass

        def getAllAvailableSong(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_appli._t_Central)

        __repr__ = __str__

    _M_appli.CentralPrx = Ice.createTempClass()
    class CentralPrx(Ice.ObjectPrx):

        def inscriptionClient(self, login, passWord, _ctx=None):
            return _M_appli.Central._op_inscriptionClient.invoke(self, ((login, passWord), _ctx))

        def begin_inscriptionClient(self, login, passWord, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.Central._op_inscriptionClient.begin(self, ((login, passWord), _response, _ex, _sent, _ctx))

        def end_inscriptionClient(self, _r):
            return _M_appli.Central._op_inscriptionClient.end(self, _r)

        def connectionClient(self, login, passWord, _ctx=None):
            return _M_appli.Central._op_connectionClient.invoke(self, ((login, passWord), _ctx))

        def begin_connectionClient(self, login, passWord, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.Central._op_connectionClient.begin(self, ((login, passWord), _response, _ex, _sent, _ctx))

        def end_connectionClient(self, _r):
            return _M_appli.Central._op_connectionClient.end(self, _r)

        def findByName(self, nameSong, _ctx=None):
            return _M_appli.Central._op_findByName.invoke(self, ((nameSong, ), _ctx))

        def begin_findByName(self, nameSong, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.Central._op_findByName.begin(self, ((nameSong, ), _response, _ex, _sent, _ctx))

        def end_findByName(self, _r):
            return _M_appli.Central._op_findByName.end(self, _r)

        def streamByName(self, nameSong, _ctx=None):
            return _M_appli.Central._op_streamByName.invoke(self, ((nameSong, ), _ctx))

        def begin_streamByName(self, nameSong, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.Central._op_streamByName.begin(self, ((nameSong, ), _response, _ex, _sent, _ctx))

        def end_streamByName(self, _r):
            return _M_appli.Central._op_streamByName.end(self, _r)

        def add(self, theSong, nameSong, _ctx=None):
            return _M_appli.Central._op_add.invoke(self, ((theSong, nameSong), _ctx))

        def begin_add(self, theSong, nameSong, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.Central._op_add.begin(self, ((theSong, nameSong), _response, _ex, _sent, _ctx))

        def end_add(self, _r):
            return _M_appli.Central._op_add.end(self, _r)

        def getAllAvailableSong(self, _ctx=None):
            return _M_appli.Central._op_getAllAvailableSong.invoke(self, ((), _ctx))

        def begin_getAllAvailableSong(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.Central._op_getAllAvailableSong.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getAllAvailableSong(self, _r):
            return _M_appli.Central._op_getAllAvailableSong.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_appli.CentralPrx.ice_checkedCast(proxy, '::appli::Central', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_appli.CentralPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::appli::Central'
        ice_staticId = staticmethod(ice_staticId)

    _M_appli._t_CentralPrx = IcePy.defineProxy('::appli::Central', CentralPrx)

    _M_appli._t_Central = IcePy.defineClass('::appli::Central', Central, -1, (), True, False, None, (), ())
    Central._ice_type = _M_appli._t_Central

    Central._op_inscriptionClient = IcePy.Operation('inscriptionClient', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    Central._op_connectionClient = IcePy.Operation('connectionClient', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    Central._op_findByName = IcePy.Operation('findByName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_appli._t_liste, False, 0), ())
    Central._op_streamByName = IcePy.Operation('streamByName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), ())
    Central._op_add = IcePy.Operation('add', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_appli._t_song, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    Central._op_getAllAvailableSong = IcePy.Operation('getAllAvailableSong', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_appli._t_liste, False, 0), ())

    _M_appli.Central = Central
    del Central

    _M_appli.CentralPrx = CentralPrx
    del CentralPrx

# End of module appli
