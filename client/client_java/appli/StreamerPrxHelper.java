// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `app.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package appli;

/**
 * Provides type-specific helper functions.
 **/
public final class StreamerPrxHelper extends Ice.ObjectPrxHelperBase implements StreamerPrx
{
    private static final String __addSong_name = "addSong";

    public boolean addSong(byte[] theSong, String nameSong)
    {
        return addSong(theSong, nameSong, null, false);
    }

    public boolean addSong(byte[] theSong, String nameSong, java.util.Map<String, String> __ctx)
    {
        return addSong(theSong, nameSong, __ctx, true);
    }

    private boolean addSong(byte[] theSong, String nameSong, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__addSong_name);
        return end_addSong(begin_addSong(theSong, nameSong, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_addSong(byte[] theSong, String nameSong)
    {
        return begin_addSong(theSong, nameSong, null, false, false, null);
    }

    public Ice.AsyncResult begin_addSong(byte[] theSong, String nameSong, java.util.Map<String, String> __ctx)
    {
        return begin_addSong(theSong, nameSong, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_addSong(byte[] theSong, String nameSong, Ice.Callback __cb)
    {
        return begin_addSong(theSong, nameSong, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addSong(byte[] theSong, String nameSong, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addSong(theSong, nameSong, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addSong(byte[] theSong, String nameSong, Callback_Streamer_addSong __cb)
    {
        return begin_addSong(theSong, nameSong, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_addSong(byte[] theSong, String nameSong, java.util.Map<String, String> __ctx, Callback_Streamer_addSong __cb)
    {
        return begin_addSong(theSong, nameSong, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_addSong(byte[] theSong, 
                                         String nameSong, 
                                         IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addSong(theSong, nameSong, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addSong(byte[] theSong, 
                                         String nameSong, 
                                         IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addSong(theSong, nameSong, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_addSong(byte[] theSong, 
                                         String nameSong, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_addSong(theSong, nameSong, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_addSong(byte[] theSong, 
                                         String nameSong, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_BoolCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addSong(theSong, nameSong, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_addSong(byte[] theSong, 
                                          String nameSong, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_BoolCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_addSong(theSong, nameSong, __ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         StreamerPrxHelper.__addSong_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_addSong(byte[] theSong, 
                                          String nameSong, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addSong_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__addSong_name, __cb);
        try
        {
            __result.prepare(__addSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            songHelper.write(__os, theSong);
            __os.writeString(nameSong);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_addSong(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __addSong_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __addSong_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        appli.StreamerPrx __proxy = (appli.StreamerPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_addSong(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __checkStream_name = "checkStream";

    public boolean checkStream(String nameSong)
    {
        return checkStream(nameSong, null, false);
    }

    public boolean checkStream(String nameSong, java.util.Map<String, String> __ctx)
    {
        return checkStream(nameSong, __ctx, true);
    }

    private boolean checkStream(String nameSong, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__checkStream_name);
        return end_checkStream(begin_checkStream(nameSong, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_checkStream(String nameSong)
    {
        return begin_checkStream(nameSong, null, false, false, null);
    }

    public Ice.AsyncResult begin_checkStream(String nameSong, java.util.Map<String, String> __ctx)
    {
        return begin_checkStream(nameSong, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_checkStream(String nameSong, Ice.Callback __cb)
    {
        return begin_checkStream(nameSong, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_checkStream(String nameSong, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_checkStream(nameSong, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_checkStream(String nameSong, Callback_Streamer_checkStream __cb)
    {
        return begin_checkStream(nameSong, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_checkStream(String nameSong, java.util.Map<String, String> __ctx, Callback_Streamer_checkStream __cb)
    {
        return begin_checkStream(nameSong, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_checkStream(String nameSong, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_checkStream(nameSong, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_checkStream(String nameSong, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_checkStream(nameSong, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_checkStream(String nameSong, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_checkStream(nameSong, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_checkStream(String nameSong, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_BoolCallback __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_checkStream(nameSong, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_checkStream(String nameSong, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_BoolCallback __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_checkStream(nameSong, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             StreamerPrxHelper.__checkStream_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_checkStream(String nameSong, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__checkStream_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__checkStream_name, __cb);
        try
        {
            __result.prepare(__checkStream_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(nameSong);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_checkStream(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __checkStream_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __checkStream_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        appli.StreamerPrx __proxy = (appli.StreamerPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_checkStream(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getRepertoire_name = "getRepertoire";

    public music[] getRepertoire()
    {
        return getRepertoire(null, false);
    }

    public music[] getRepertoire(java.util.Map<String, String> __ctx)
    {
        return getRepertoire(__ctx, true);
    }

    private music[] getRepertoire(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getRepertoire_name);
        return end_getRepertoire(begin_getRepertoire(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getRepertoire()
    {
        return begin_getRepertoire(null, false, false, null);
    }

    public Ice.AsyncResult begin_getRepertoire(java.util.Map<String, String> __ctx)
    {
        return begin_getRepertoire(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getRepertoire(Ice.Callback __cb)
    {
        return begin_getRepertoire(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getRepertoire(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getRepertoire(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getRepertoire(Callback_Streamer_getRepertoire __cb)
    {
        return begin_getRepertoire(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getRepertoire(java.util.Map<String, String> __ctx, Callback_Streamer_getRepertoire __cb)
    {
        return begin_getRepertoire(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getRepertoire(IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getRepertoire(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getRepertoire(IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getRepertoire(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getRepertoire(java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getRepertoire(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getRepertoire(java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getRepertoire(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getRepertoire(java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getRepertoire(__ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1<appli.music[]>(__responseCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               StreamerPrxHelper.__getRepertoire_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_getRepertoire(java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getRepertoire_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getRepertoire_name, __cb);
        try
        {
            __result.prepare(__getRepertoire_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public music[] end_getRepertoire(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getRepertoire_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            music[] __ret;
            __ret = repositoryHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getRepertoire_completed(Ice.TwowayCallbackArg1<music[]> __cb, Ice.AsyncResult __result)
    {
        appli.StreamerPrx __proxy = (appli.StreamerPrx)__result.getProxy();
        music[] __ret = null;
        try
        {
            __ret = __proxy.end_getRepertoire(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static StreamerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), StreamerPrx.class, StreamerPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static StreamerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), StreamerPrx.class, StreamerPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static StreamerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), StreamerPrx.class, StreamerPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static StreamerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), StreamerPrx.class, StreamerPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static StreamerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, StreamerPrx.class, StreamerPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static StreamerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, StreamerPrx.class, StreamerPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::appli::Streamer"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, StreamerPrx v)
    {
        __os.writeProxy(v);
    }

    public static StreamerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            StreamerPrxHelper result = new StreamerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
