// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `app.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package appli;

/**
 * Provides type-specific helper functions.
 **/
public final class CentralPrxHelper extends Ice.ObjectPrxHelperBase implements CentralPrx
{
    private static final String __findByAlbum_name = "findByAlbum";

    public music[] findByAlbum(String nameAlbum)
    {
        return findByAlbum(nameAlbum, null, false);
    }

    public music[] findByAlbum(String nameAlbum, java.util.Map<String, String> __ctx)
    {
        return findByAlbum(nameAlbum, __ctx, true);
    }

    private music[] findByAlbum(String nameAlbum, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__findByAlbum_name);
        return end_findByAlbum(begin_findByAlbum(nameAlbum, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_findByAlbum(String nameAlbum)
    {
        return begin_findByAlbum(nameAlbum, null, false, false, null);
    }

    public Ice.AsyncResult begin_findByAlbum(String nameAlbum, java.util.Map<String, String> __ctx)
    {
        return begin_findByAlbum(nameAlbum, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_findByAlbum(String nameAlbum, Ice.Callback __cb)
    {
        return begin_findByAlbum(nameAlbum, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_findByAlbum(String nameAlbum, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findByAlbum(nameAlbum, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_findByAlbum(String nameAlbum, Callback_Central_findByAlbum __cb)
    {
        return begin_findByAlbum(nameAlbum, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_findByAlbum(String nameAlbum, java.util.Map<String, String> __ctx, Callback_Central_findByAlbum __cb)
    {
        return begin_findByAlbum(nameAlbum, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_findByAlbum(String nameAlbum, 
                                             IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_findByAlbum(nameAlbum, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_findByAlbum(String nameAlbum, 
                                             IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findByAlbum(nameAlbum, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_findByAlbum(String nameAlbum, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_findByAlbum(nameAlbum, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_findByAlbum(String nameAlbum, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findByAlbum(nameAlbum, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_findByAlbum(String nameAlbum, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findByAlbum(nameAlbum, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<appli.music[]>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             CentralPrxHelper.__findByAlbum_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_findByAlbum(String nameAlbum, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findByAlbum_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__findByAlbum_name, __cb);
        try
        {
            __result.prepare(__findByAlbum_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(nameAlbum);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public music[] end_findByAlbum(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __findByAlbum_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            music[] __ret;
            __ret = repositoryHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __findByAlbum_completed(Ice.TwowayCallbackArg1<music[]> __cb, Ice.AsyncResult __result)
    {
        appli.CentralPrx __proxy = (appli.CentralPrx)__result.getProxy();
        music[] __ret = null;
        try
        {
            __ret = __proxy.end_findByAlbum(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __findByAuth_name = "findByAuth";

    public music[] findByAuth(String nameAuthor)
    {
        return findByAuth(nameAuthor, null, false);
    }

    public music[] findByAuth(String nameAuthor, java.util.Map<String, String> __ctx)
    {
        return findByAuth(nameAuthor, __ctx, true);
    }

    private music[] findByAuth(String nameAuthor, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__findByAuth_name);
        return end_findByAuth(begin_findByAuth(nameAuthor, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_findByAuth(String nameAuthor)
    {
        return begin_findByAuth(nameAuthor, null, false, false, null);
    }

    public Ice.AsyncResult begin_findByAuth(String nameAuthor, java.util.Map<String, String> __ctx)
    {
        return begin_findByAuth(nameAuthor, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_findByAuth(String nameAuthor, Ice.Callback __cb)
    {
        return begin_findByAuth(nameAuthor, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_findByAuth(String nameAuthor, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findByAuth(nameAuthor, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_findByAuth(String nameAuthor, Callback_Central_findByAuth __cb)
    {
        return begin_findByAuth(nameAuthor, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_findByAuth(String nameAuthor, java.util.Map<String, String> __ctx, Callback_Central_findByAuth __cb)
    {
        return begin_findByAuth(nameAuthor, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_findByAuth(String nameAuthor, 
                                            IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_findByAuth(nameAuthor, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_findByAuth(String nameAuthor, 
                                            IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findByAuth(nameAuthor, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_findByAuth(String nameAuthor, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_findByAuth(nameAuthor, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_findByAuth(String nameAuthor, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findByAuth(nameAuthor, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_findByAuth(String nameAuthor, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findByAuth(nameAuthor, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<appli.music[]>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            CentralPrxHelper.__findByAuth_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_findByAuth(String nameAuthor, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findByAuth_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__findByAuth_name, __cb);
        try
        {
            __result.prepare(__findByAuth_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(nameAuthor);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public music[] end_findByAuth(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __findByAuth_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            music[] __ret;
            __ret = repositoryHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __findByAuth_completed(Ice.TwowayCallbackArg1<music[]> __cb, Ice.AsyncResult __result)
    {
        appli.CentralPrx __proxy = (appli.CentralPrx)__result.getProxy();
        music[] __ret = null;
        try
        {
            __ret = __proxy.end_findByAuth(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __findByGenre_name = "findByGenre";

    public music[] findByGenre(String nameGenre)
    {
        return findByGenre(nameGenre, null, false);
    }

    public music[] findByGenre(String nameGenre, java.util.Map<String, String> __ctx)
    {
        return findByGenre(nameGenre, __ctx, true);
    }

    private music[] findByGenre(String nameGenre, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__findByGenre_name);
        return end_findByGenre(begin_findByGenre(nameGenre, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_findByGenre(String nameGenre)
    {
        return begin_findByGenre(nameGenre, null, false, false, null);
    }

    public Ice.AsyncResult begin_findByGenre(String nameGenre, java.util.Map<String, String> __ctx)
    {
        return begin_findByGenre(nameGenre, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_findByGenre(String nameGenre, Ice.Callback __cb)
    {
        return begin_findByGenre(nameGenre, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_findByGenre(String nameGenre, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findByGenre(nameGenre, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_findByGenre(String nameGenre, Callback_Central_findByGenre __cb)
    {
        return begin_findByGenre(nameGenre, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_findByGenre(String nameGenre, java.util.Map<String, String> __ctx, Callback_Central_findByGenre __cb)
    {
        return begin_findByGenre(nameGenre, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_findByGenre(String nameGenre, 
                                             IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_findByGenre(nameGenre, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_findByGenre(String nameGenre, 
                                             IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findByGenre(nameGenre, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_findByGenre(String nameGenre, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_findByGenre(nameGenre, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_findByGenre(String nameGenre, 
                                             java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findByGenre(nameGenre, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_findByGenre(String nameGenre, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findByGenre(nameGenre, __ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<appli.music[]>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             CentralPrxHelper.__findByGenre_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_findByGenre(String nameGenre, 
                                              java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findByGenre_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__findByGenre_name, __cb);
        try
        {
            __result.prepare(__findByGenre_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(nameGenre);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public music[] end_findByGenre(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __findByGenre_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            music[] __ret;
            __ret = repositoryHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __findByGenre_completed(Ice.TwowayCallbackArg1<music[]> __cb, Ice.AsyncResult __result)
    {
        appli.CentralPrx __proxy = (appli.CentralPrx)__result.getProxy();
        music[] __ret = null;
        try
        {
            __ret = __proxy.end_findByGenre(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __findByName_name = "findByName";

    public music[] findByName(String nameSong)
    {
        return findByName(nameSong, null, false);
    }

    public music[] findByName(String nameSong, java.util.Map<String, String> __ctx)
    {
        return findByName(nameSong, __ctx, true);
    }

    private music[] findByName(String nameSong, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__findByName_name);
        return end_findByName(begin_findByName(nameSong, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_findByName(String nameSong)
    {
        return begin_findByName(nameSong, null, false, false, null);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, java.util.Map<String, String> __ctx)
    {
        return begin_findByName(nameSong, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, Ice.Callback __cb)
    {
        return begin_findByName(nameSong, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findByName(nameSong, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, Callback_Central_findByName __cb)
    {
        return begin_findByName(nameSong, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, java.util.Map<String, String> __ctx, Callback_Central_findByName __cb)
    {
        return begin_findByName(nameSong, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, 
                                            IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_findByName(nameSong, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, 
                                            IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findByName(nameSong, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_findByName(nameSong, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findByName(nameSong, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_findByName(String nameSong, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findByName(nameSong, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<appli.music[]>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            CentralPrxHelper.__findByName_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_findByName(String nameSong, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findByName_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__findByName_name, __cb);
        try
        {
            __result.prepare(__findByName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(nameSong);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public music[] end_findByName(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __findByName_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            music[] __ret;
            __ret = repositoryHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __findByName_completed(Ice.TwowayCallbackArg1<music[]> __cb, Ice.AsyncResult __result)
    {
        appli.CentralPrx __proxy = (appli.CentralPrx)__result.getProxy();
        music[] __ret = null;
        try
        {
            __ret = __proxy.end_findByName(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getAllAvailableSong_name = "getAllAvailableSong";

    public music[] getAllAvailableSong()
    {
        return getAllAvailableSong(null, false);
    }

    public music[] getAllAvailableSong(java.util.Map<String, String> __ctx)
    {
        return getAllAvailableSong(__ctx, true);
    }

    private music[] getAllAvailableSong(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getAllAvailableSong_name);
        return end_getAllAvailableSong(begin_getAllAvailableSong(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getAllAvailableSong()
    {
        return begin_getAllAvailableSong(null, false, false, null);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(java.util.Map<String, String> __ctx)
    {
        return begin_getAllAvailableSong(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(Ice.Callback __cb)
    {
        return begin_getAllAvailableSong(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllAvailableSong(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(Callback_Central_getAllAvailableSong __cb)
    {
        return begin_getAllAvailableSong(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(java.util.Map<String, String> __ctx, Callback_Central_getAllAvailableSong __cb)
    {
        return begin_getAllAvailableSong(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getAllAvailableSong(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getAllAvailableSong(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getAllAvailableSong(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getAllAvailableSong(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getAllAvailableSong(java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.Functional_GenericCallback1<music[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getAllAvailableSong(__ctx, __explicitCtx, __synchronous, 
                                         new IceInternal.Functional_TwowayCallbackArg1<appli.music[]>(__responseCb, __exceptionCb, __sentCb)
                                             {
                                                 public final void __completed(Ice.AsyncResult __result)
                                                 {
                                                     CentralPrxHelper.__getAllAvailableSong_completed(this, __result);
                                                 }
                                             });
    }

    private Ice.AsyncResult begin_getAllAvailableSong(java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllAvailableSong_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getAllAvailableSong_name, __cb);
        try
        {
            __result.prepare(__getAllAvailableSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public music[] end_getAllAvailableSong(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getAllAvailableSong_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            music[] __ret;
            __ret = repositoryHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getAllAvailableSong_completed(Ice.TwowayCallbackArg1<music[]> __cb, Ice.AsyncResult __result)
    {
        appli.CentralPrx __proxy = (appli.CentralPrx)__result.getProxy();
        music[] __ret = null;
        try
        {
            __ret = __proxy.end_getAllAvailableSong(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getStreamer_name = "getStreamer";

    public String getStreamer()
    {
        return getStreamer(null, false);
    }

    public String getStreamer(java.util.Map<String, String> __ctx)
    {
        return getStreamer(__ctx, true);
    }

    private String getStreamer(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getStreamer_name);
        return end_getStreamer(begin_getStreamer(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getStreamer()
    {
        return begin_getStreamer(null, false, false, null);
    }

    public Ice.AsyncResult begin_getStreamer(java.util.Map<String, String> __ctx)
    {
        return begin_getStreamer(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getStreamer(Ice.Callback __cb)
    {
        return begin_getStreamer(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getStreamer(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getStreamer(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getStreamer(Callback_Central_getStreamer __cb)
    {
        return begin_getStreamer(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getStreamer(java.util.Map<String, String> __ctx, Callback_Central_getStreamer __cb)
    {
        return begin_getStreamer(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getStreamer(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getStreamer(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getStreamer(IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStreamer(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getStreamer(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getStreamer(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getStreamer(java.util.Map<String, String> __ctx, 
                                             IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStreamer(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getStreamer(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getStreamer(__ctx, __explicitCtx, __synchronous, 
                                 new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                     {
                                         public final void __completed(Ice.AsyncResult __result)
                                         {
                                             CentralPrxHelper.__getStreamer_completed(this, __result);
                                         }
                                     });
    }

    private Ice.AsyncResult begin_getStreamer(java.util.Map<String, String> __ctx, 
                                              boolean __explicitCtx, 
                                              boolean __synchronous, 
                                              IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getStreamer_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getStreamer_name, __cb);
        try
        {
            __result.prepare(__getStreamer_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_getStreamer(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getStreamer_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getStreamer_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        appli.CentralPrx __proxy = (appli.CentralPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_getStreamer(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CentralPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), CentralPrx.class, CentralPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CentralPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), CentralPrx.class, CentralPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CentralPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), CentralPrx.class, CentralPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CentralPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), CentralPrx.class, CentralPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static CentralPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, CentralPrx.class, CentralPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static CentralPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, CentralPrx.class, CentralPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::appli::Central"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, CentralPrx v)
    {
        __os.writeProxy(v);
    }

    public static CentralPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            CentralPrxHelper result = new CentralPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
