// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Interface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Music;

public interface controlePrx extends Ice.ObjectPrx
{
    public byte[] filter(byte[] theSong);

    public byte[] filter(byte[] theSong, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_filter(byte[] theSong);

    public Ice.AsyncResult begin_filter(byte[] theSong, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_filter(byte[] theSong, Ice.Callback __cb);

    public Ice.AsyncResult begin_filter(byte[] theSong, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_filter(byte[] theSong, Callback_controle_filter __cb);

    public Ice.AsyncResult begin_filter(byte[] theSong, java.util.Map<String, String> __ctx, Callback_controle_filter __cb);

    public byte[] end_filter(Ice.AsyncResult __result);

    public byte[] bass(byte[] theSong, int level);

    public byte[] bass(byte[] theSong, int level, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_bass(byte[] theSong, int level);

    public Ice.AsyncResult begin_bass(byte[] theSong, int level, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_bass(byte[] theSong, int level, Ice.Callback __cb);

    public Ice.AsyncResult begin_bass(byte[] theSong, int level, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_bass(byte[] theSong, int level, Callback_controle_bass __cb);

    public Ice.AsyncResult begin_bass(byte[] theSong, int level, java.util.Map<String, String> __ctx, Callback_controle_bass __cb);

    public byte[] end_bass(Ice.AsyncResult __result);
}
