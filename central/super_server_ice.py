# **********************************************************************
#
# Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.1
#
# <auto-generated>
#
# Generated from file `super_server.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module appli
_M_appli = Ice.openModule('appli')
__name__ = 'appli'

if '_t_song' not in _M_appli.__dict__:
    _M_appli._t_song = IcePy.defineSequence('::appli::song', (), IcePy._t_byte)

if '_t_liste' not in _M_appli.__dict__:
    _M_appli._t_liste = IcePy.defineSequence('::appli::liste', (), IcePy._t_string)

if 'serverCentral' not in _M_appli.__dict__:
    _M_appli.serverCentral = Ice.createTempClass()
    class serverCentral(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_appli.serverCentral:
                raise RuntimeError('appli.serverCentral is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::appli::serverCentral')

        def ice_id(self, current=None):
            return '::appli::serverCentral'

        def ice_staticId():
            return '::appli::serverCentral'
        ice_staticId = staticmethod(ice_staticId)

        def inscriptionServer(self, addIp, addMac, port, current=None):
            pass

        def connectionServer(self, ID, passWord, current=None):
            pass

        def deconnectionServer(self, current=None):
            pass

        def getRepertoire(self, current=None):
            pass

        def notify(self, current=None):
            pass

        def update(self, current=None):
            pass

        def addSong(self, theSong, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_appli._t_serverCentral)

        __repr__ = __str__

    _M_appli.serverCentralPrx = Ice.createTempClass()
    class serverCentralPrx(Ice.ObjectPrx):

        def inscriptionServer(self, addIp, addMac, port, _ctx=None):
            return _M_appli.serverCentral._op_inscriptionServer.invoke(self, ((addIp, addMac, port), _ctx))

        def begin_inscriptionServer(self, addIp, addMac, port, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.serverCentral._op_inscriptionServer.begin(self, ((addIp, addMac, port), _response, _ex, _sent, _ctx))

        def end_inscriptionServer(self, _r):
            return _M_appli.serverCentral._op_inscriptionServer.end(self, _r)

        def connectionServer(self, ID, passWord, _ctx=None):
            return _M_appli.serverCentral._op_connectionServer.invoke(self, ((ID, passWord), _ctx))

        def begin_connectionServer(self, ID, passWord, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.serverCentral._op_connectionServer.begin(self, ((ID, passWord), _response, _ex, _sent, _ctx))

        def end_connectionServer(self, _r):
            return _M_appli.serverCentral._op_connectionServer.end(self, _r)

        def deconnectionServer(self, _ctx=None):
            return _M_appli.serverCentral._op_deconnectionServer.invoke(self, ((), _ctx))

        def begin_deconnectionServer(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.serverCentral._op_deconnectionServer.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_deconnectionServer(self, _r):
            return _M_appli.serverCentral._op_deconnectionServer.end(self, _r)

        def getRepertoire(self, _ctx=None):
            return _M_appli.serverCentral._op_getRepertoire.invoke(self, ((), _ctx))

        def begin_getRepertoire(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.serverCentral._op_getRepertoire.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getRepertoire(self, _r):
            return _M_appli.serverCentral._op_getRepertoire.end(self, _r)

        def notify(self, _ctx=None):
            return _M_appli.serverCentral._op_notify.invoke(self, ((), _ctx))

        def begin_notify(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.serverCentral._op_notify.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_notify(self, _r):
            return _M_appli.serverCentral._op_notify.end(self, _r)

        def update(self, _ctx=None):
            return _M_appli.serverCentral._op_update.invoke(self, ((), _ctx))

        def begin_update(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.serverCentral._op_update.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_update(self, _r):
            return _M_appli.serverCentral._op_update.end(self, _r)

        def addSong(self, theSong, _ctx=None):
            return _M_appli.serverCentral._op_addSong.invoke(self, ((theSong, ), _ctx))

        def begin_addSong(self, theSong, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.serverCentral._op_addSong.begin(self, ((theSong, ), _response, _ex, _sent, _ctx))

        def end_addSong(self, _r):
            return _M_appli.serverCentral._op_addSong.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_appli.serverCentralPrx.ice_checkedCast(proxy, '::appli::serverCentral', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_appli.serverCentralPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::appli::serverCentral'
        ice_staticId = staticmethod(ice_staticId)

    _M_appli._t_serverCentralPrx = IcePy.defineProxy('::appli::serverCentral', serverCentralPrx)

    _M_appli._t_serverCentral = IcePy.defineClass('::appli::serverCentral', serverCentral, -1, (), True, False, None, (), ())
    serverCentral._ice_type = _M_appli._t_serverCentral

    serverCentral._op_inscriptionServer = IcePy.Operation('inscriptionServer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    serverCentral._op_connectionServer = IcePy.Operation('connectionServer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    serverCentral._op_deconnectionServer = IcePy.Operation('deconnectionServer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    serverCentral._op_getRepertoire = IcePy.Operation('getRepertoire', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_appli._t_liste, False, 0), ())
    serverCentral._op_notify = IcePy.Operation('notify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    serverCentral._op_update = IcePy.Operation('update', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    serverCentral._op_addSong = IcePy.Operation('addSong', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_appli._t_song, False, 0),), (), ((), IcePy._t_bool, False, 0), ())

    _M_appli.serverCentral = serverCentral
    del serverCentral

    _M_appli.serverCentralPrx = serverCentralPrx
    del serverCentralPrx

if 'CentralClient' not in _M_appli.__dict__:
    _M_appli.CentralClient = Ice.createTempClass()
    class CentralClient(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_appli.CentralClient:
                raise RuntimeError('appli.CentralClient is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::appli::CentralClient')

        def ice_id(self, current=None):
            return '::appli::CentralClient'

        def ice_staticId():
            return '::appli::CentralClient'
        ice_staticId = staticmethod(ice_staticId)

        def inscriptionClient(self, login, passWord, current=None):
            pass

        def connectionClient(self, login, passWord, addIp, current=None):
            pass

        def findByName(self, nameSong, current=None):
            pass

        def findByAuthor(self, nameAuthor, current=None):
            pass

        def streamById(self, idSong, current=None):
            pass

        def streamByName(self, nameSong, current=None):
            pass

        def add(self, theSong, nameSong, nameAuthor, current=None):
            pass

        def getAllAvailableSong(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_appli._t_CentralClient)

        __repr__ = __str__

    _M_appli.CentralClientPrx = Ice.createTempClass()
    class CentralClientPrx(Ice.ObjectPrx):

        def inscriptionClient(self, login, passWord, _ctx=None):
            return _M_appli.CentralClient._op_inscriptionClient.invoke(self, ((login, passWord), _ctx))

        def begin_inscriptionClient(self, login, passWord, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.CentralClient._op_inscriptionClient.begin(self, ((login, passWord), _response, _ex, _sent, _ctx))

        def end_inscriptionClient(self, _r):
            return _M_appli.CentralClient._op_inscriptionClient.end(self, _r)

        def connectionClient(self, login, passWord, addIp, _ctx=None):
            return _M_appli.CentralClient._op_connectionClient.invoke(self, ((login, passWord, addIp), _ctx))

        def begin_connectionClient(self, login, passWord, addIp, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.CentralClient._op_connectionClient.begin(self, ((login, passWord, addIp), _response, _ex, _sent, _ctx))

        def end_connectionClient(self, _r):
            return _M_appli.CentralClient._op_connectionClient.end(self, _r)

        def findByName(self, nameSong, _ctx=None):
            return _M_appli.CentralClient._op_findByName.invoke(self, ((nameSong, ), _ctx))

        def begin_findByName(self, nameSong, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.CentralClient._op_findByName.begin(self, ((nameSong, ), _response, _ex, _sent, _ctx))

        def end_findByName(self, _r):
            return _M_appli.CentralClient._op_findByName.end(self, _r)

        def findByAuthor(self, nameAuthor, _ctx=None):
            return _M_appli.CentralClient._op_findByAuthor.invoke(self, ((nameAuthor, ), _ctx))

        def begin_findByAuthor(self, nameAuthor, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.CentralClient._op_findByAuthor.begin(self, ((nameAuthor, ), _response, _ex, _sent, _ctx))

        def end_findByAuthor(self, _r):
            return _M_appli.CentralClient._op_findByAuthor.end(self, _r)

        def streamById(self, idSong, _ctx=None):
            return _M_appli.CentralClient._op_streamById.invoke(self, ((idSong, ), _ctx))

        def begin_streamById(self, idSong, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.CentralClient._op_streamById.begin(self, ((idSong, ), _response, _ex, _sent, _ctx))

        def end_streamById(self, _r):
            return _M_appli.CentralClient._op_streamById.end(self, _r)

        def streamByName(self, nameSong, _ctx=None):
            return _M_appli.CentralClient._op_streamByName.invoke(self, ((nameSong, ), _ctx))

        def begin_streamByName(self, nameSong, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.CentralClient._op_streamByName.begin(self, ((nameSong, ), _response, _ex, _sent, _ctx))

        def end_streamByName(self, _r):
            return _M_appli.CentralClient._op_streamByName.end(self, _r)

        def add(self, theSong, nameSong, nameAuthor, _ctx=None):
            return _M_appli.CentralClient._op_add.invoke(self, ((theSong, nameSong, nameAuthor), _ctx))

        def begin_add(self, theSong, nameSong, nameAuthor, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.CentralClient._op_add.begin(self, ((theSong, nameSong, nameAuthor), _response, _ex, _sent, _ctx))

        def end_add(self, _r):
            return _M_appli.CentralClient._op_add.end(self, _r)

        def getAllAvailableSong(self, _ctx=None):
            return _M_appli.CentralClient._op_getAllAvailableSong.invoke(self, ((), _ctx))

        def begin_getAllAvailableSong(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_appli.CentralClient._op_getAllAvailableSong.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getAllAvailableSong(self, _r):
            return _M_appli.CentralClient._op_getAllAvailableSong.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_appli.CentralClientPrx.ice_checkedCast(proxy, '::appli::CentralClient', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_appli.CentralClientPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::appli::CentralClient'
        ice_staticId = staticmethod(ice_staticId)

    _M_appli._t_CentralClientPrx = IcePy.defineProxy('::appli::CentralClient', CentralClientPrx)

    _M_appli._t_CentralClient = IcePy.defineClass('::appli::CentralClient', CentralClient, -1, (), True, False, None, (), ())
    CentralClient._ice_type = _M_appli._t_CentralClient

    CentralClient._op_inscriptionClient = IcePy.Operation('inscriptionClient', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    CentralClient._op_connectionClient = IcePy.Operation('connectionClient', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    CentralClient._op_findByName = IcePy.Operation('findByName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_appli._t_liste, False, 0), ())
    CentralClient._op_findByAuthor = IcePy.Operation('findByAuthor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_appli._t_liste, False, 0), ())
    CentralClient._op_streamById = IcePy.Operation('streamById', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), _M_appli._t_song, False, 0), ())
    CentralClient._op_streamByName = IcePy.Operation('streamByName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_appli._t_song, False, 0), ())
    CentralClient._op_add = IcePy.Operation('add', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_appli._t_song, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), IcePy._t_bool, False, 0), ())
    CentralClient._op_getAllAvailableSong = IcePy.Operation('getAllAvailableSong', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_appli._t_liste, False, 0), ())

    _M_appli.CentralClient = CentralClient
    del CentralClient

    _M_appli.CentralClientPrx = CentralClientPrx
    del CentralClientPrx

# End of module appli
