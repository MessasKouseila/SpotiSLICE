// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `app.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package appli;

public class music implements java.lang.Cloneable, java.io.Serializable {
    public static final long serialVersionUID = 6342765898833488796L;
    private static final music _nullMarshalValue = new music();
    public String name;
    public String author;
    public String album;
    public String genre;
    public String url;

    public music() {
        this.name = "";
        this.author = "";
        this.album = "";
        this.genre = "";
        this.url = "";
    }

    public music(String name, String author, String album, String genre, String url) {
        this.name = name;
        this.author = author;
        this.album = album;
        this.genre = genre;
        this.url = url;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, music v) {
        if (v == null) {
            _nullMarshalValue.ice_writeMembers(ostr);
        } else {
            v.ice_writeMembers(ostr);
        }
    }

    static public music ice_read(com.zeroc.Ice.InputStream istr) {
        music v = new music();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<music> v) {
        if (v != null && v.isPresent()) {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, music v) {
        if (ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize)) {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<music> ice_read(com.zeroc.Ice.InputStream istr, int tag) {
        if (istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize)) {
            istr.skip(4);
            return java.util.Optional.of(music.ice_read(istr));
        } else {
            return java.util.Optional.empty();
        }
    }

    public boolean equals(java.lang.Object rhs) {
        if (this == rhs) {
            return true;
        }
        music r = null;
        if (rhs instanceof music) {
            r = (music) rhs;
        }

        if (r != null) {
            if (this.name != r.name) {
                if (this.name == null || r.name == null || !this.name.equals(r.name)) {
                    return false;
                }
            }
            if (this.author != r.author) {
                if (this.author == null || r.author == null || !this.author.equals(r.author)) {
                    return false;
                }
            }
            if (this.album != r.album) {
                if (this.album == null || r.album == null || !this.album.equals(r.album)) {
                    return false;
                }
            }
            if (this.genre != r.genre) {
                if (this.genre == null || r.genre == null || !this.genre.equals(r.genre)) {
                    return false;
                }
            }
            if (this.url != r.url) {
                if (this.url == null || r.url == null || !this.url.equals(r.url)) {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode() {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::appli::music");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, name);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, author);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, album);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, genre);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, url);
        return h_;
    }

    public music clone() {
        music c = null;
        try {
            c = (music) super.clone();
        } catch (CloneNotSupportedException ex) {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr) {
        ostr.writeString(this.name);
        ostr.writeString(this.author);
        ostr.writeString(this.album);
        ostr.writeString(this.genre);
        ostr.writeString(this.url);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr) {
        this.name = istr.readString();
        this.author = istr.readString();
        this.album = istr.readString();
        this.genre = istr.readString();
        this.url = istr.readString();
    }
}
