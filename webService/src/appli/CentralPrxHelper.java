// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `app.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package appli;

/**
 * Provides type-specific helper functions.
 **/
public final class CentralPrxHelper extends Ice.ObjectPrxHelperBase implements CentralPrx
{
    private static final String __add_name = "add";

    public boolean add(byte[] theSong, String nameSong)
    {
        return add(theSong, nameSong, null, false);
    }

    public boolean add(byte[] theSong, String nameSong, java.util.Map<String, String> __ctx)
    {
        return add(theSong, nameSong, __ctx, true);
    }

    private boolean add(byte[] theSong, String nameSong, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__add_name);
        return end_add(begin_add(theSong, nameSong, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong)
    {
        return begin_add(theSong, nameSong, null, false, false, null);
    }

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, java.util.Map<String, String> __ctx)
    {
        return begin_add(theSong, nameSong, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, Ice.Callback __cb)
    {
        return begin_add(theSong, nameSong, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_add(theSong, nameSong, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, Callback_Central_add __cb)
    {
        return begin_add(theSong, nameSong, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, java.util.Map<String, String> __ctx, Callback_Central_add __cb)
    {
        return begin_add(theSong, nameSong, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_add(byte[] theSong, 
                                     String nameSong, 
                                     IceInternal.Functional_BoolCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_add(theSong, nameSong, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_add(byte[] theSong, 
                                     String nameSong, 
                                     IceInternal.Functional_BoolCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_add(theSong, nameSong, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_add(byte[] theSong, 
                                     String nameSong, 
                                     java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_BoolCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_add(theSong, nameSong, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_add(byte[] theSong, 
                                     String nameSong, 
                                     java.util.Map<String, String> __ctx, 
                                     IceInternal.Functional_BoolCallback __responseCb, 
                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_add(theSong, nameSong, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_add(byte[] theSong, 
                                      String nameSong, 
                                      java.util.Map<String, String> __ctx, 
                                      boolean __explicitCtx, 
                                      boolean __synchronous, 
                                      IceInternal.Functional_BoolCallback __responseCb, 
                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_add(theSong, nameSong, __ctx, __explicitCtx, __synchronous, 
                         new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                             {
                                 public final void __completed(Ice.AsyncResult __result)
                                 {
                                     CentralPrxHelper.__add_completed(this, __result);
                                 }
                             });
    }

    private Ice.AsyncResult begin_add(byte[] theSong, 
                                      String nameSong, 
                                      java.util.Map<String, String> __ctx, 
                                      boolean __explicitCtx, 
                                      boolean __synchronous, 
                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__add_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__add_name, __cb);
        try
        {
            __result.prepare(__add_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            songHelper.write(__os, theSong);
            __os.writeString(nameSong);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_add(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __add_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __add_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        appli.CentralPrx __proxy = (appli.CentralPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_add(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __connectionClient_name = "connectionClient";

    public boolean connectionClient(String login, String passWord)
    {
        return connectionClient(login, passWord, null, false);
    }

    public boolean connectionClient(String login, String passWord, java.util.Map<String, String> __ctx)
    {
        return connectionClient(login, passWord, __ctx, true);
    }

    private boolean connectionClient(String login, String passWord, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__connectionClient_name);
        return end_connectionClient(begin_connectionClient(login, passWord, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_connectionClient(String login, String passWord)
    {
        return begin_connectionClient(login, passWord, null, false, false, null);
    }

    public Ice.AsyncResult begin_connectionClient(String login, String passWord, java.util.Map<String, String> __ctx)
    {
        return begin_connectionClient(login, passWord, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_connectionClient(String login, String passWord, Ice.Callback __cb)
    {
        return begin_connectionClient(login, passWord, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_connectionClient(String login, String passWord, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_connectionClient(login, passWord, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_connectionClient(String login, String passWord, Callback_Central_connectionClient __cb)
    {
        return begin_connectionClient(login, passWord, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_connectionClient(String login, String passWord, java.util.Map<String, String> __ctx, Callback_Central_connectionClient __cb)
    {
        return begin_connectionClient(login, passWord, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_connectionClient(String login, 
                                                  String passWord, 
                                                  IceInternal.Functional_BoolCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_connectionClient(login, passWord, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_connectionClient(String login, 
                                                  String passWord, 
                                                  IceInternal.Functional_BoolCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_connectionClient(login, passWord, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_connectionClient(String login, 
                                                  String passWord, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_BoolCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_connectionClient(login, passWord, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_connectionClient(String login, 
                                                  String passWord, 
                                                  java.util.Map<String, String> __ctx, 
                                                  IceInternal.Functional_BoolCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_connectionClient(login, passWord, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_connectionClient(String login, 
                                                   String passWord, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.Functional_BoolCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_connectionClient(login, passWord, __ctx, __explicitCtx, __synchronous, 
                                      new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                          {
                                              public final void __completed(Ice.AsyncResult __result)
                                              {
                                                  CentralPrxHelper.__connectionClient_completed(this, __result);
                                              }
                                          });
    }

    private Ice.AsyncResult begin_connectionClient(String login, 
                                                   String passWord, 
                                                   java.util.Map<String, String> __ctx, 
                                                   boolean __explicitCtx, 
                                                   boolean __synchronous, 
                                                   IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__connectionClient_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__connectionClient_name, __cb);
        try
        {
            __result.prepare(__connectionClient_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(login);
            __os.writeString(passWord);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_connectionClient(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __connectionClient_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __connectionClient_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        appli.CentralPrx __proxy = (appli.CentralPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_connectionClient(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __findByName_name = "findByName";

    public String[] findByName(String nameSong)
    {
        return findByName(nameSong, null, false);
    }

    public String[] findByName(String nameSong, java.util.Map<String, String> __ctx)
    {
        return findByName(nameSong, __ctx, true);
    }

    private String[] findByName(String nameSong, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__findByName_name);
        return end_findByName(begin_findByName(nameSong, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_findByName(String nameSong)
    {
        return begin_findByName(nameSong, null, false, false, null);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, java.util.Map<String, String> __ctx)
    {
        return begin_findByName(nameSong, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, Ice.Callback __cb)
    {
        return begin_findByName(nameSong, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findByName(nameSong, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, Callback_Central_findByName __cb)
    {
        return begin_findByName(nameSong, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, java.util.Map<String, String> __ctx, Callback_Central_findByName __cb)
    {
        return begin_findByName(nameSong, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, 
                                            IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_findByName(nameSong, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, 
                                            IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findByName(nameSong, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_findByName(nameSong, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, 
                                            java.util.Map<String, String> __ctx, 
                                            IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findByName(nameSong, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_findByName(String nameSong, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                             IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                             IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_findByName(nameSong, __ctx, __explicitCtx, __synchronous, 
                                new IceInternal.Functional_TwowayCallbackArg1<String[]>(__responseCb, __exceptionCb, __sentCb)
                                    {
                                        public final void __completed(Ice.AsyncResult __result)
                                        {
                                            CentralPrxHelper.__findByName_completed(this, __result);
                                        }
                                    });
    }

    private Ice.AsyncResult begin_findByName(String nameSong, 
                                             java.util.Map<String, String> __ctx, 
                                             boolean __explicitCtx, 
                                             boolean __synchronous, 
                                             IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findByName_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__findByName_name, __cb);
        try
        {
            __result.prepare(__findByName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(nameSong);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String[] end_findByName(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __findByName_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String[] __ret;
            __ret = listeHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __findByName_completed(Ice.TwowayCallbackArg1<String[]> __cb, Ice.AsyncResult __result)
    {
        appli.CentralPrx __proxy = (appli.CentralPrx)__result.getProxy();
        String[] __ret = null;
        try
        {
            __ret = __proxy.end_findByName(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __getAllAvailableSong_name = "getAllAvailableSong";

    public String[] getAllAvailableSong()
    {
        return getAllAvailableSong(null, false);
    }

    public String[] getAllAvailableSong(java.util.Map<String, String> __ctx)
    {
        return getAllAvailableSong(__ctx, true);
    }

    private String[] getAllAvailableSong(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__getAllAvailableSong_name);
        return end_getAllAvailableSong(begin_getAllAvailableSong(__ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_getAllAvailableSong()
    {
        return begin_getAllAvailableSong(null, false, false, null);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(java.util.Map<String, String> __ctx)
    {
        return begin_getAllAvailableSong(__ctx, true, false, null);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(Ice.Callback __cb)
    {
        return begin_getAllAvailableSong(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllAvailableSong(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(Callback_Central_getAllAvailableSong __cb)
    {
        return begin_getAllAvailableSong(null, false, false, __cb);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(java.util.Map<String, String> __ctx, Callback_Central_getAllAvailableSong __cb)
    {
        return begin_getAllAvailableSong(__ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getAllAvailableSong(null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getAllAvailableSong(null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_getAllAvailableSong(__ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_getAllAvailableSong(java.util.Map<String, String> __ctx, 
                                                     IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getAllAvailableSong(__ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_getAllAvailableSong(java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.Functional_GenericCallback1<String[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_getAllAvailableSong(__ctx, __explicitCtx, __synchronous, 
                                         new IceInternal.Functional_TwowayCallbackArg1<String[]>(__responseCb, __exceptionCb, __sentCb)
                                             {
                                                 public final void __completed(Ice.AsyncResult __result)
                                                 {
                                                     CentralPrxHelper.__getAllAvailableSong_completed(this, __result);
                                                 }
                                             });
    }

    private Ice.AsyncResult begin_getAllAvailableSong(java.util.Map<String, String> __ctx, 
                                                      boolean __explicitCtx, 
                                                      boolean __synchronous, 
                                                      IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllAvailableSong_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__getAllAvailableSong_name, __cb);
        try
        {
            __result.prepare(__getAllAvailableSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            __result.writeEmptyParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String[] end_getAllAvailableSong(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __getAllAvailableSong_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String[] __ret;
            __ret = listeHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __getAllAvailableSong_completed(Ice.TwowayCallbackArg1<String[]> __cb, Ice.AsyncResult __result)
    {
        appli.CentralPrx __proxy = (appli.CentralPrx)__result.getProxy();
        String[] __ret = null;
        try
        {
            __ret = __proxy.end_getAllAvailableSong(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __inscriptionClient_name = "inscriptionClient";

    public boolean inscriptionClient(String login, String passWord)
    {
        return inscriptionClient(login, passWord, null, false);
    }

    public boolean inscriptionClient(String login, String passWord, java.util.Map<String, String> __ctx)
    {
        return inscriptionClient(login, passWord, __ctx, true);
    }

    private boolean inscriptionClient(String login, String passWord, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__inscriptionClient_name);
        return end_inscriptionClient(begin_inscriptionClient(login, passWord, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_inscriptionClient(String login, String passWord)
    {
        return begin_inscriptionClient(login, passWord, null, false, false, null);
    }

    public Ice.AsyncResult begin_inscriptionClient(String login, String passWord, java.util.Map<String, String> __ctx)
    {
        return begin_inscriptionClient(login, passWord, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_inscriptionClient(String login, String passWord, Ice.Callback __cb)
    {
        return begin_inscriptionClient(login, passWord, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_inscriptionClient(String login, String passWord, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_inscriptionClient(login, passWord, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_inscriptionClient(String login, String passWord, Callback_Central_inscriptionClient __cb)
    {
        return begin_inscriptionClient(login, passWord, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_inscriptionClient(String login, String passWord, java.util.Map<String, String> __ctx, Callback_Central_inscriptionClient __cb)
    {
        return begin_inscriptionClient(login, passWord, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_inscriptionClient(String login, 
                                                   String passWord, 
                                                   IceInternal.Functional_BoolCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_inscriptionClient(login, passWord, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_inscriptionClient(String login, 
                                                   String passWord, 
                                                   IceInternal.Functional_BoolCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_inscriptionClient(login, passWord, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_inscriptionClient(String login, 
                                                   String passWord, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_BoolCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_inscriptionClient(login, passWord, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_inscriptionClient(String login, 
                                                   String passWord, 
                                                   java.util.Map<String, String> __ctx, 
                                                   IceInternal.Functional_BoolCallback __responseCb, 
                                                   IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                   IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_inscriptionClient(login, passWord, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_inscriptionClient(String login, 
                                                    String passWord, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.Functional_BoolCallback __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_inscriptionClient(login, passWord, __ctx, __explicitCtx, __synchronous, 
                                       new IceInternal.Functional_TwowayCallbackBool(__responseCb, __exceptionCb, __sentCb)
                                           {
                                               public final void __completed(Ice.AsyncResult __result)
                                               {
                                                   CentralPrxHelper.__inscriptionClient_completed(this, __result);
                                               }
                                           });
    }

    private Ice.AsyncResult begin_inscriptionClient(String login, 
                                                    String passWord, 
                                                    java.util.Map<String, String> __ctx, 
                                                    boolean __explicitCtx, 
                                                    boolean __synchronous, 
                                                    IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__inscriptionClient_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__inscriptionClient_name, __cb);
        try
        {
            __result.prepare(__inscriptionClient_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(login);
            __os.writeString(passWord);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_inscriptionClient(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __inscriptionClient_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __inscriptionClient_completed(Ice.TwowayCallbackBool __cb, Ice.AsyncResult __result)
    {
        appli.CentralPrx __proxy = (appli.CentralPrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_inscriptionClient(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __streamByName_name = "streamByName";

    public String streamByName(String nameSong)
    {
        return streamByName(nameSong, null, false);
    }

    public String streamByName(String nameSong, java.util.Map<String, String> __ctx)
    {
        return streamByName(nameSong, __ctx, true);
    }

    private String streamByName(String nameSong, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        __checkTwowayOnly(__streamByName_name);
        return end_streamByName(begin_streamByName(nameSong, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_streamByName(String nameSong)
    {
        return begin_streamByName(nameSong, null, false, false, null);
    }

    public Ice.AsyncResult begin_streamByName(String nameSong, java.util.Map<String, String> __ctx)
    {
        return begin_streamByName(nameSong, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_streamByName(String nameSong, Ice.Callback __cb)
    {
        return begin_streamByName(nameSong, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_streamByName(String nameSong, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_streamByName(nameSong, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_streamByName(String nameSong, Callback_Central_streamByName __cb)
    {
        return begin_streamByName(nameSong, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_streamByName(String nameSong, java.util.Map<String, String> __ctx, Callback_Central_streamByName __cb)
    {
        return begin_streamByName(nameSong, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_streamByName(String nameSong, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_streamByName(nameSong, null, false, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_streamByName(String nameSong, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_streamByName(nameSong, null, false, false, __responseCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_streamByName(String nameSong, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_streamByName(nameSong, __ctx, true, false, __responseCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_streamByName(String nameSong, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_streamByName(nameSong, __ctx, true, false, __responseCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_streamByName(String nameSong, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_streamByName(nameSong, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1<String>(__responseCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              CentralPrxHelper.__streamByName_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_streamByName(String nameSong, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__streamByName_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__streamByName_name, __cb);
        try
        {
            __result.prepare(__streamByName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(nameSong);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_streamByName(Ice.AsyncResult __iresult)
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __streamByName_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __streamByName_completed(Ice.TwowayCallbackArg1<String> __cb, Ice.AsyncResult __result)
    {
        appli.CentralPrx __proxy = (appli.CentralPrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_streamByName(__result);
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CentralPrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), CentralPrx.class, CentralPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CentralPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), CentralPrx.class, CentralPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CentralPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), CentralPrx.class, CentralPrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static CentralPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), CentralPrx.class, CentralPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static CentralPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, CentralPrx.class, CentralPrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static CentralPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, CentralPrx.class, CentralPrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::appli::Central"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, CentralPrx v)
    {
        __os.writeProxy(v);
    }

    public static CentralPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            CentralPrxHelper result = new CentralPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
