// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Interface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Music;

public interface mp3Prx extends Ice.ObjectPrx
{
    public byte[] findByName(String nameSong);

    public byte[] findByName(String nameSong, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_findByName(String nameSong);

    public Ice.AsyncResult begin_findByName(String nameSong, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_findByName(String nameSong, Ice.Callback __cb);

    public Ice.AsyncResult begin_findByName(String nameSong, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_findByName(String nameSong, Callback_mp3_findByName __cb);

    public Ice.AsyncResult begin_findByName(String nameSong, java.util.Map<String, String> __ctx, Callback_mp3_findByName __cb);

    public byte[] end_findByName(Ice.AsyncResult __result);

    public byte[] findById(int idSong);

    public byte[] findById(int idSong, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_findById(int idSong);

    public Ice.AsyncResult begin_findById(int idSong, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_findById(int idSong, Ice.Callback __cb);

    public Ice.AsyncResult begin_findById(int idSong, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_findById(int idSong, Callback_mp3_findById __cb);

    public Ice.AsyncResult begin_findById(int idSong, java.util.Map<String, String> __ctx, Callback_mp3_findById __cb);

    public byte[] end_findById(Ice.AsyncResult __result);

    public void add(byte[] theSong, String nameSong, int idSong);

    public void add(byte[] theSong, String nameSong, int idSong, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, int idSong);

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, int idSong, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, int idSong, Ice.Callback __cb);

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, int idSong, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, int idSong, Callback_mp3_add __cb);

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, int idSong, java.util.Map<String, String> __ctx, Callback_mp3_add __cb);

    public void end_add(Ice.AsyncResult __result);

    public void delete(String nameSong);

    public void delete(String nameSong, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_delete(String nameSong);

    public Ice.AsyncResult begin_delete(String nameSong, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_delete(String nameSong, Ice.Callback __cb);

    public Ice.AsyncResult begin_delete(String nameSong, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_delete(String nameSong, Callback_mp3_delete __cb);

    public Ice.AsyncResult begin_delete(String nameSong, java.util.Map<String, String> __ctx, Callback_mp3_delete __cb);

    public void end_delete(Ice.AsyncResult __result);

    public String[] getALL();

    public String[] getALL(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getALL();

    public Ice.AsyncResult begin_getALL(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getALL(Ice.Callback __cb);

    public Ice.AsyncResult begin_getALL(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getALL(Callback_mp3_getALL __cb);

    public Ice.AsyncResult begin_getALL(java.util.Map<String, String> __ctx, Callback_mp3_getALL __cb);

    public String[] end_getALL(Ice.AsyncResult __result);
}
