// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Interface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Music;

public final class mp3PrxHelper extends Ice.ObjectPrxHelperBase implements mp3Prx
{
    private static final String __add_name = "add";

    public void add(byte[] theSong, String nameSong, int idSong)
    {
        add(theSong, nameSong, idSong, null, false);
    }

    public void add(byte[] theSong, String nameSong, int idSong, java.util.Map<String, String> __ctx)
    {
        add(theSong, nameSong, idSong, __ctx, true);
    }

    private void add(byte[] theSong, String nameSong, int idSong, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "add", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _mp3Del __del = (_mp3Del)__delBase;
                    __del.add(theSong, nameSong, idSong, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, int idSong)
    {
        return begin_add(theSong, nameSong, idSong, null, false, null);
    }

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, int idSong, java.util.Map<String, String> __ctx)
    {
        return begin_add(theSong, nameSong, idSong, __ctx, true, null);
    }

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, int idSong, Ice.Callback __cb)
    {
        return begin_add(theSong, nameSong, idSong, null, false, __cb);
    }

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, int idSong, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_add(theSong, nameSong, idSong, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, int idSong, Callback_mp3_add __cb)
    {
        return begin_add(theSong, nameSong, idSong, null, false, __cb);
    }

    public Ice.AsyncResult begin_add(byte[] theSong, String nameSong, int idSong, java.util.Map<String, String> __ctx, Callback_mp3_add __cb)
    {
        return begin_add(theSong, nameSong, idSong, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_add(byte[] theSong, String nameSong, int idSong, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __add_name, __cb);
        try
        {
            __result.__prepare(__add_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            songHelper.write(__os, theSong);
            __os.writeString(nameSong);
            __os.writeInt(idSong);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_add(Ice.AsyncResult __result)
    {
        __end(__result, __add_name);
    }

    private static final String __delete_name = "delete";

    public void delete(String nameSong)
    {
        delete(nameSong, null, false);
    }

    public void delete(String nameSong, java.util.Map<String, String> __ctx)
    {
        delete(nameSong, __ctx, true);
    }

    private void delete(String nameSong, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "delete", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _mp3Del __del = (_mp3Del)__delBase;
                    __del.delete(nameSong, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_delete(String nameSong)
    {
        return begin_delete(nameSong, null, false, null);
    }

    public Ice.AsyncResult begin_delete(String nameSong, java.util.Map<String, String> __ctx)
    {
        return begin_delete(nameSong, __ctx, true, null);
    }

    public Ice.AsyncResult begin_delete(String nameSong, Ice.Callback __cb)
    {
        return begin_delete(nameSong, null, false, __cb);
    }

    public Ice.AsyncResult begin_delete(String nameSong, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_delete(nameSong, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_delete(String nameSong, Callback_mp3_delete __cb)
    {
        return begin_delete(nameSong, null, false, __cb);
    }

    public Ice.AsyncResult begin_delete(String nameSong, java.util.Map<String, String> __ctx, Callback_mp3_delete __cb)
    {
        return begin_delete(nameSong, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_delete(String nameSong, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __delete_name, __cb);
        try
        {
            __result.__prepare(__delete_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(nameSong);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_delete(Ice.AsyncResult __result)
    {
        __end(__result, __delete_name);
    }

    private static final String __findById_name = "findById";

    public byte[] findById(int idSong)
    {
        return findById(idSong, null, false);
    }

    public byte[] findById(int idSong, java.util.Map<String, String> __ctx)
    {
        return findById(idSong, __ctx, true);
    }

    private byte[] findById(int idSong, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "findById", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("findById");
                    __delBase = __getDelegate(false);
                    _mp3Del __del = (_mp3Del)__delBase;
                    return __del.findById(idSong, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_findById(int idSong)
    {
        return begin_findById(idSong, null, false, null);
    }

    public Ice.AsyncResult begin_findById(int idSong, java.util.Map<String, String> __ctx)
    {
        return begin_findById(idSong, __ctx, true, null);
    }

    public Ice.AsyncResult begin_findById(int idSong, Ice.Callback __cb)
    {
        return begin_findById(idSong, null, false, __cb);
    }

    public Ice.AsyncResult begin_findById(int idSong, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findById(idSong, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_findById(int idSong, Callback_mp3_findById __cb)
    {
        return begin_findById(idSong, null, false, __cb);
    }

    public Ice.AsyncResult begin_findById(int idSong, java.util.Map<String, String> __ctx, Callback_mp3_findById __cb)
    {
        return begin_findById(idSong, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_findById(int idSong, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findById_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __findById_name, __cb);
        try
        {
            __result.__prepare(__findById_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(idSong);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public byte[] end_findById(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __findById_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            byte[] __ret;
            __ret = songHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __findByName_name = "findByName";

    public byte[] findByName(String nameSong)
    {
        return findByName(nameSong, null, false);
    }

    public byte[] findByName(String nameSong, java.util.Map<String, String> __ctx)
    {
        return findByName(nameSong, __ctx, true);
    }

    private byte[] findByName(String nameSong, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "findByName", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("findByName");
                    __delBase = __getDelegate(false);
                    _mp3Del __del = (_mp3Del)__delBase;
                    return __del.findByName(nameSong, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_findByName(String nameSong)
    {
        return begin_findByName(nameSong, null, false, null);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, java.util.Map<String, String> __ctx)
    {
        return begin_findByName(nameSong, __ctx, true, null);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, Ice.Callback __cb)
    {
        return begin_findByName(nameSong, null, false, __cb);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_findByName(nameSong, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, Callback_mp3_findByName __cb)
    {
        return begin_findByName(nameSong, null, false, __cb);
    }

    public Ice.AsyncResult begin_findByName(String nameSong, java.util.Map<String, String> __ctx, Callback_mp3_findByName __cb)
    {
        return begin_findByName(nameSong, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_findByName(String nameSong, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__findByName_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __findByName_name, __cb);
        try
        {
            __result.__prepare(__findByName_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(nameSong);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public byte[] end_findByName(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __findByName_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            byte[] __ret;
            __ret = songHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getALL_name = "getALL";

    public String[] getALL()
    {
        return getALL(null, false);
    }

    public String[] getALL(java.util.Map<String, String> __ctx)
    {
        return getALL(__ctx, true);
    }

    private String[] getALL(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getALL", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getALL");
                    __delBase = __getDelegate(false);
                    _mp3Del __del = (_mp3Del)__delBase;
                    return __del.getALL(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getALL()
    {
        return begin_getALL(null, false, null);
    }

    public Ice.AsyncResult begin_getALL(java.util.Map<String, String> __ctx)
    {
        return begin_getALL(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getALL(Ice.Callback __cb)
    {
        return begin_getALL(null, false, __cb);
    }

    public Ice.AsyncResult begin_getALL(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getALL(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getALL(Callback_mp3_getALL __cb)
    {
        return begin_getALL(null, false, __cb);
    }

    public Ice.AsyncResult begin_getALL(java.util.Map<String, String> __ctx, Callback_mp3_getALL __cb)
    {
        return begin_getALL(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getALL(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getALL_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getALL_name, __cb);
        try
        {
            __result.__prepare(__getALL_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getALL(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getALL_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = listeHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static mp3Prx checkedCast(Ice.ObjectPrx __obj)
    {
        mp3Prx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof mp3Prx)
            {
                __d = (mp3Prx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    mp3PrxHelper __h = new mp3PrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static mp3Prx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        mp3Prx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof mp3Prx)
            {
                __d = (mp3Prx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    mp3PrxHelper __h = new mp3PrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static mp3Prx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        mp3Prx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    mp3PrxHelper __h = new mp3PrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static mp3Prx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        mp3Prx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    mp3PrxHelper __h = new mp3PrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static mp3Prx uncheckedCast(Ice.ObjectPrx __obj)
    {
        mp3Prx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof mp3Prx)
            {
                __d = (mp3Prx)__obj;
            }
            else
            {
                mp3PrxHelper __h = new mp3PrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static mp3Prx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        mp3Prx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            mp3PrxHelper __h = new mp3PrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Music::mp3"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _mp3DelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _mp3DelD();
    }

    public static void __write(IceInternal.BasicStream __os, mp3Prx v)
    {
        __os.writeProxy(v);
    }

    public static mp3Prx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            mp3PrxHelper result = new mp3PrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
